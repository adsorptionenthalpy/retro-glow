'STAZI ADVENTURE RPG 1998
DECLARE SUB BATTLE (ENEMY!)
DECLARE SUB DRAWSPRITE (Sprite() AS INTEGER, X, Y)
DECLARE SUB DRAWSPRITEALT (Sprite() AS INTEGER, X, Y)
DECLARE SUB DIALOG (message$)
DECLARE SUB SHOP ()
DIM GRASSTILE%(15, 13), WATERTILE%(15, 13), STONETILE%(15, 13), DOORTILE%(15, 13)
DIM FLOORTILE%(15, 13), CHR%(15, 13), MERCHANT%(15, 13), SKELE%(15, 13)
DIM map(21, 15), map2(21, 15), map3(21, 15)

'DIRECTIONAL
CONST WEST = 0
CONST NORTH = 1
CONST EAST = 2
CONST SOUTH = 3

' TILE CONSTANTS
CONST GRASS = 1
CONST WATER = 2
CONST STONE = 3
CONST DOOR = 4
CONST FLOOR = 5

'SPRITE CONSTANTS
CONST MERCHANTNPC = 4
CONST WIZARD = 5
CONST SKELE = 6
CONST WARRIOR = 7

'MAP CONSTANTS
CONST PASSABLE = 1
CONST TILEWIDTH = 15
CONST TILEHEIGHT = 13
CONST MAPWIDTH = 21
CONST MAPHEIGHT = 15

'GAME CONSTANTS
CONST STARTINGCOPPER = 1000
CONST STARTINGSTRENGTH = 1
CONST STARTINGDEFENSE = 1
CONST STARTINGATTACK = 1
CONST STARTINGHP = 10

'PLAYER VARIABLES
LET hasboat = false
LET copper = STARTINGCOPPER
LET strength = STARTINGSTRENGTH
LET defense = STARTINGDEFENSE
LET attack = STARTINGATTACK
LET hp = STARTINGHP

LET chrx = 3
LET chry = 3
LET currentmap = 1
LET DIRECTION = RIGHT

SCREEN 13

FOR Y = 1 TO 13
    FOR X = 1 TO 15
        READ GRASSTILE%
        PSET (X, Y), GRASSTILE%
NEXT: NEXT
GET (1, 1)-(15, 13), GRASSTILE%

FOR Y = 1 TO 13
    FOR X = 1 TO 15
        READ WATERTILE%
        PSET (X, Y), WATERTILE%
NEXT: NEXT
GET (1, 1)-(15, 13), WATERTILE%

FOR Y = 1 TO 13
    FOR X = 1 TO 15
        READ STONETILE%
        PSET (X, Y), STONETILE%
NEXT: NEXT
GET (1, 1)-(15, 13), STONETILE%

FOR Y = 1 TO 13
    FOR X = 1 TO 15
        READ DOORTILE%
        PSET (X, Y), DOORTILE%
NEXT: NEXT
GET (1, 1)-(15, 13), DOORTILE%

FOR Y = 1 TO 13
    FOR X = 1 TO 15
        READ FLOORTILE%
        PSET (X, Y), FLOORTILE%
NEXT: NEXT
GET (1, 1)-(15, 13), FLOORTILE%

'Get Sprites
FOR Y = 1 TO TILEHEIGHT
    FOR X = 1 TO TILEWIDTH
        READ CHR%(X, Y)
NEXT: NEXT

FOR Y = 1 TO TILEHEIGHT
    FOR X = 1 TO TILEWIDTH
        READ MERCHANT%(X, Y)
NEXT: NEXT

FOR Y = 1 TO TILEHEIGHT
    FOR X = 1 TO TILEWIDTH
        READ SKELE%(X, Y)
NEXT: NEXT

' Get Map Data
FOR Y = 1 TO 15
    FOR X = 1 TO 21
        READ map(X, Y)
NEXT: NEXT

FOR Y = 1 TO 15
    FOR X = 1 TO 21
        READ map2(X, Y)
NEXT: NEXT

FOR Y = 1 TO 15
    FOR X = 1 TO 21
        READ map3(X, Y)
NEXT: NEXT


DO
    press$ = INKEY$
   
    'player movement
    IF INP(&H60) = 77 THEN 'MOVE RIGHT
        DIRECTION = EAST
        IF chrx < MAPWIDTH THEN
            IF map3(chrx + 1, chry) = PASSABLE THEN chrx = chrx + 1
        END IF
    END IF
  
    IF INP(&H60) = 75 THEN 'MOVE LEFT
        DIRECTION = WEST
        IF chrx > 1 THEN
            IF map3(chrx - 1, chry) = PASSABLE THEN chrx = chrx - 1
        END IF
    END IF
    IF INP(&H60) = 72 THEN 'MOVE UP
        DIRECTION = NORTH
        IF chry > 1 THEN
            IF map3(chrx, chry - 1) = PASSABLE THEN chry = chry - 1
        END IF
    END IF
    IF INP(&H60) = 80 THEN 'MOVE DOWN
        DIRECTION = SOUTH
        IF chry < MAPHEIGHT THEN
            IF map3(chrx, chry + 1) = PASSABLE THEN chry = chry + 1
        END IF
    END IF


    'Player interaction
    IF press$ = " " THEN
        IF DIRECTION = WEST THEN  ' LOOKING LEFT
          IF map2(chrx - 1, chry) = MERCHANTNPC THEN SHOP
          IF map(chrx - 1, chry) = WATER THEN DIALOG ("Can't go for a swim!")
          IF map2(chrx - 1, chry) = SKELE THEN BATTLE (SKELE)
          IF map2(chrx - 1, chry) = WARRIOR THEN BATTLE (WARRIOR)
          IF map2(chrx - 1, chry) = WIZARD THEN BATTLE (WIZARD)
        END IF
        IF DIRECTION = EAST THEN  'LOOKING RIGHT
          IF chrx < MAPWIDTH THEN 'Don't interact outside the map or crash!
            IF map2(chrx + 1, chry) = MERCHANTNPC THEN SHOP
            IF map2(chrx + 1, chry) = WIZARD THEN DIALOG ("I have lost my staff.")

            IF map(chrx + 1, chry) = WATER THEN DIALOG ("Can't go for a swim!")
          END IF
        END IF
        IF DIRECTION = NORTH THEN 'LOOKING UP
            IF map2(chrx, chry - 1) = MERCHANTNPC THEN SHOP
            IF map(chrx, chry - 1) = WATER THEN DIALOG ("Can't go for a swim!")
        END IF
        IF DIRECTION = SOUTH THEN 'LOOKING DOWN
          IF chry < MAPHEIGHT THEN 'Don't interact outside the map or crash!
            IF map2(chrx, chry + 1) = MERCHANTNPC THEN SHOP
            IF map(chrx, chry + 1) = WATER THEN DIALOG ("Can't go for a swim!")
          END IF
        END IF
    END IF

    'Update graphics (only when player moves!)
    IF oldchrx <> chrx OR oldchry <> chry THEN
        oldchrx = chrx
        oldchry = chry
        FOR Y = 1 TO MAPHEIGHT
            FOR X = 1 TO MAPWIDTH
                IF map(X, Y) = GRASS THEN PUT (X * TILEWIDTH - TILEWIDTH, Y * TILEHEIGHT - TILEHEIGHT), GRASSTILE%, PSET
                IF map(X, Y) = WATER THEN PUT (X * TILEWIDTH - TILEWIDTH, Y * TILEHEIGHT - TILEHEIGHT), WATERTILE%, PSET
                IF map(X, Y) = STONE THEN PUT (X * TILEWIDTH - TILEWIDTH, Y * TILEHEIGHT - TILEHEIGHT), STONETILE%, PSET
                 IF map(X, Y) = DOOR THEN PUT (X * TILEWIDTH - TILEWIDTH, Y * TILEHEIGHT - TILEHEIGHT), DOORTILE%, PSET
                IF map(X, Y) = FLOOR THEN PUT (X * TILEWIDTH - TILEWIDTH, Y * TILEHEIGHT - TILEHEIGHT), FLOORTILE%, PSET
        NEXT: NEXT


        'Check passable elements

        'Update Sprites
        FOR Y = 1 TO MAPHEIGHT
          FOR X = 1 TO MAPWIDTH
            IF map2(X, Y) = MERCHANTNPC THEN DRAWSPRITE MERCHANT%(), X * TILEWIDTH - TILEWIDTH, Y * TILEHEIGHT - TILEHEIGHT
            IF map2(X, Y) = WIZARD THEN DRAWSPRITEALT MERCHANT%(), X * TILEWIDTH - TILEWIDTH, Y * TILEHEIGHT - TILEHEIGHT
            IF map2(X, Y) = SKELE THEN DRAWSPRITE SKELE%(), X * TILEWIDTH - TILEWIDTH, Y * TILEHEIGHT - TILEHEIGHT
            IF map2(X, Y) = WARRIOR THEN DRAWSPRITEALT CHR%(), X * TILEWIDTH - TILEWIDTH, Y * TILEHEIGHT - TILEHEIGHT
          NEXT: NEXT
     
      DRAWSPRITE CHR%(), chrx * TILEWIDTH - TILEWIDTH, chry * TILEHEIGHT - TILEHEIGHT

      END IF

LOOP UNTIL press$ = CHR$(27)


'TILES
'GRASSTILE
DATA 2,10,2,2,2,2,2,2,2,2,2,2,2,2,2
DATA 2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
DATA 2,2,2,2,2,2,10,2,2,2,2,2,2,2,2
DATA 2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
DATA 2,2,10,2,2,2,2,2,2,2,2,2,2,2,2
DATA 2,2,2,2,2,2,2,2,2,10,2,2,2,2,2
DATA 2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
DATA 2,2,2,10,2,2,2,2,2,2,2,2,2,2,2
DATA 2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
DATA 2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
DATA 2,2,2,2,2,2,2,2,2,2,2,2,2,10,2
DATA 2,2,2,2,2,2,2,10,2,2,2,2,2,2,2
DATA 2,2,2,2,2,2,2,2,2,2,2,2,2,2,2

'WATERTILE
DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
DATA 1,1,1,1,9,1,1,1,1,1,1,1,1,1,1
DATA 1,1,1,9,1,9,1,1,1,1,1,1,1,1,1
DATA 1,1,1,1,1,1,1,1,1,1,1,9,1,1,1
DATA 1,1,1,1,1,1,1,1,1,1,9,1,9,1,1
DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
DATA 1,1,1,1,1,1,9,1,1,1,1,1,1,1,1
DATA 1,1,1,1,1,9,1,9,1,1,1,1,1,1,1
DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1

'STONE TILE
DATA 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8
DATA 8,7,7,7,7,7,7,7,7,7,7,7,7,7,8
DATA 8,7,7,7,7,7,7,7,7,7,7,7,7,7,8
DATA 8,7,7,7,7,7,7,7,7,7,7,7,7,7,8
DATA 8,7,7,7,7,7,7,7,7,7,7,7,7,7,8
DATA 8,7,7,7,7,7,7,7,7,7,7,7,7,7,8
DATA 8,7,7,7,7,7,7,7,7,7,7,7,7,7,8
DATA 8,7,7,7,7,7,7,7,7,7,7,7,7,7,8
DATA 8,7,7,7,7,7,7,7,7,7,7,7,7,7,8
DATA 8,7,7,7,7,7,7,7,7,7,7,7,7,7,8
DATA 8,7,7,7,7,7,7,7,7,7,7,7,7,7,8
DATA 8,7,7,7,7,7,7,7,7,7,7,7,7,7,8
DATA 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8

'DOOR TILE
DATA 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8
DATA 8,7,7,7,6,6,6,6,6,6,6,7,7,7,8
DATA 8,7,7,6,6,6,6,6,6,6,6,6,7,7,8
DATA 8,7,7,6,6,6,6,6,6,6,6,6,7,7,8
DATA 8,7,7,6,6,6,6,6,6,6,6,6,7,7,8
DATA 8,7,7,6,6,6,6,6,6,6,6,6,7,7,8
DATA 8,7,7,6,6,6,6,6,6,6,6,6,7,7,8
DATA 8,7,7,6,6,6,6,6,6,14,6,6,7,7,8
DATA 8,7,7,6,6,6,6,6,6,6,6,6,7,7,8
DATA 8,7,7,6,6,6,6,6,6,6,6,6,7,7,8
DATA 8,7,7,6,6,6,6,6,6,6,6,6,7,7,8
DATA 8,7,7,6,6,6,6,6,6,6,6,6,7,7,8
DATA 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8

'FLOOR TILE
DATA 4,6,4,6,4,6,4,6,4,6,4,6,4,6,4
DATA 6,4,6,4,6,4,6,4,6,4,6,4,6,4,6
DATA 4,6,4,6,4,6,4,6,4,6,4,6,4,6,4
DATA 6,4,6,4,6,4,6,4,6,4,6,4,6,4,6
DATA 4,6,4,6,4,6,4,6,4,6,4,6,4,6,4
DATA 6,4,6,4,6,4,6,4,6,4,6,4,6,4,6
DATA 4,6,4,6,4,6,4,6,4,6,4,6,4,6,4
DATA 6,4,6,4,6,4,6,4,6,4,6,4,6,4,6
DATA 4,6,4,6,4,6,4,6,4,6,4,6,4,6,4
DATA 6,4,6,4,6,4,6,4,6,4,6,4,6,4,6
DATA 4,6,4,6,4,6,4,6,4,6,4,6,4,6,4
DATA 6,4,6,4,6,4,6,4,6,4,6,4,6,4,6
DATA 6,4,6,4,6,4,6,4,6,4,6,4,6,4,6


'PLAYER
DATA 000,000,000,000,000,000,008,008,008,000,000,000,000,015,000
DATA 000,000,000,000,000,008,082,082,082,008,000,000,000,030,000
DATA 000,000,000,000,000,008,255,082,255,008,000,000,000,030,000
DATA 000,000,000,000,000,008,082,082,082,008,000,000,000,030,000
DATA 000,007,007,007,007,007,007,008,008,000,000,008,008,030,000
DATA 000,007,001,001,001,001,007,008,008,008,008,008,014,082,014
DATA 000,007,001,001,001,001,007,008,008,008,008,008,000,082,000
DATA 000,007,001,001,001,001,007,008,008,008,000,000,000,014,000
DATA 000,007,001,001,001,001,007,008,008,008,000,000,000,000,000
DATA 000,000,007,001,001,007,008,000,008,008,000,000,000,000,000
DATA 000,000,000,007,007,008,008,000,008,008,000,000,000,000,000
DATA 000,000,000,000,000,006,006,000,006,006,000,000,000,000,000
DATA 000,000,000,000,006,006,006,000,006,006,006,000,000,000,000

'MERCHANT
DATA 0,0,0,0,0,0,0,0,1,1,0,0,0,0,0
DATA 0,0,0,0,0,0,1,1,1,0,0,0,0,0,0
DATA 0,0,0,0,0,1,1,1,1,1,0,0,0,0,0
DATA 0,0,0,0,0,15,255,82,255,15,0,0,0,0,0
DATA 0,0,0,0,0,15,82,255,82,15,0,0,0,0,0
DATA 0,0,0,0,0,0,15,15,15,15,0,0,0,0,0
DATA 0,0,0,0,0,1,1,15,15,1,0,0,0,0,0
DATA 0,0,0,0,0,1,1,15,1,1,1,0,0,0,0
DATA 0,0,82,1,1,1,1,1,1,1,1,1,0,0,0
DATA 0,0,82,1,1,4,4,4,4,1,1,82,0,0,0
DATA 0,0,0,0,0,1,1,1,1,1,1,0,0,0,0
DATA 0,0,0,0,1,1,1,1,1,1,1,0,0,0,0
DATA 0,0,0,6,1,1,1,1,1,1,6,6,0,0,0

'SKELE

DATA 0,0,0,0,0,7,7,7,0,0,15,0,0,0,0
DATA 0,0,0,0,7,7,7,7,7,0,7,0,0,0,0
DATA 0,0,0,0,7,255,7,255,7,0,7,0,0,0,0
DATA 0,0,0,0,7,7,255,7,7,0,7,0,0,0,0
DATA 0,0,0,0,255,7,7,7,255,0,7,0,0,0,0
DATA 0,7,7,0,8,7,7,7,8,14,7,14,0,0,0
DATA 7,7,7,7,8,8,8,8,8,8,14,0,0,0,0
DATA 7,7,7,7,8,8,8,8,8,8,7,0,0,0,0
DATA 7,7,7,7,0,8,8,8,0,0,0,0,0,0,0
DATA 0,7,7,0,8,7,0,7,8,0,0,0,0,0,0
DATA 0,0,0,0,7,7,0,7,7,0,0,0,0,0,0
DATA 0,0,0,0,7,7,0,7,7,0,0,0,0,0,0
DATA 0,0,0,7,7,7,0,7,7,7,0,0,0,0,0

' MAP 1
DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2
DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2
DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2
DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2
DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2
DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2
DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2
DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2
DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2
DATA 1,1,1,3,4,3,3,3,3,3,1,1,1,1,1,1,1,1,1,2,2
DATA 1,1,1,3,5,5,5,5,5,3,1,1,1,1,1,1,1,1,1,1,1
DATA 1,1,1,3,5,5,5,5,5,3,1,1,1,1,1,1,1,1,1,1,1
DATA 1,1,1,3,5,5,5,5,5,3,1,1,1,1,1,1,1,1,1,1,2
DATA 1,1,1,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,2
DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2

' MAP 2
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

' MAP 3

DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0
DATA 1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0
DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0
DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0
DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0
DATA 1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0
DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0
DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0
DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0
DATA 1,1,1,0,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0
DATA 1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1
DATA 1,1,1,0,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1
DATA 1,1,1,0,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0
DATA 1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0
DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0

SUB BATTLE (ENEMY)
  LET ENEMYHP = 0
  LET ENSTR = 0
  LET ENDEF = 0

  SELECT CASE ENEMY

    CASE SKELE:
    ENEMYHP = 5
    ENDEF = 2
    ENSTR = 2
   
    CASE WIZARD:
    ENEMYHP = 8
    ENDEF = 1
    ENSTR = 1

    CASE WARRIOR:
    ENEMYHP = 10
    ENDEF = 3
    ENSTR = 2

    CASE ELSE

  END SELECT
 
  'DO BATTLE
  FOR X = 1 TO 5

  NEXT X
END SUB

SUB DIALOG (message$)
  LINE (50, 170)-(250, 190), 1, BF
  LOCATE 23, 10: PRINT message$
END SUB

SUB DRAWSPRITE (Sprite() AS INTEGER, X, Y)
    FOR YP = 1 TO 13
      FOR xp = 1 TO 15
      IF Sprite%(xp, YP) <> 0 THEN
        PSET (xp - 1 + X, YP - 1 + Y), Sprite%(xp, YP)
      END IF
     NEXT: NEXT
END SUB

SUB DRAWSPRITEALT (Sprite() AS INTEGER, X, Y)
    FOR YP = 1 TO 13
      FOR xp = 1 TO 15
      IF Sprite%(xp, YP) <> 0 THEN
         SELECT CASE Sprite%(xp, YP)
          CASE 1:
            PSET (xp - 1 + X, YP - 1 + Y), 4
          CASE 4:
            PSET (xp - 1 + X, YP - 1 + Y), 1
          CASE 82:
            PSET (xp - 1 + X, YP - 1 + Y), 6
          CASE ELSE
          PSET (xp - 1 + X, YP - 1 + Y), Sprite%(xp, YP)
          END SELECT
      END IF
     NEXT: NEXT
END SUB

SUB SHOP
CALL DIALOG("Welcome to my shop!")
  SOUND 1533, 1.4
  LINE (50, 30)-(250, 140), 1, BF
  DO

   ' UP
   IF INP(&H60) = 72 THEN
    'move cursor down
    
   END IF
   ' DOWN
   IF INP(&H70) = 80 THEN
    
   END IF
  LOOP UNTIL INKEY$ = CHR$(13)

  CALL DIALOG("Thanks!")
END SUB

SUB STATS
END SUB

